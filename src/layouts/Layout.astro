---
import '~/assets/styles/tailwind.css';
import AdUnit from '~/components/AdUnit.astro';
import { I18N } from 'astrowind:config';

import CommonMeta from '~/components/common/CommonMeta.astro';
import Favicons from '~/components/Favicons.astro';
import CustomStyles from '~/components/CustomStyles.astro';
import ApplyColorMode from '~/components/common/ApplyColorMode.astro';
import Metadata from '~/components/common/Metadata.astro';
import SiteVerification from '~/components/common/SiteVerification.astro';
import Analytics from '~/components/common/Analytics.astro';
import BasicScripts from '~/components/common/BasicScripts.astro';

// Comment the line below to disable View Transitions
import { ClientRouter } from 'astro:transitions';

import type { MetaData as MetaDataType } from '~/types';

export interface Props {
  metadata?: MetaDataType;
}

const { metadata = {} } = Astro.props;
const { language, textDirection } = I18N;
---

<!doctype html>
<html lang={language} dir={textDirection} class="2xl:text-[20px]">
  <head>
    <CommonMeta />
    <Favicons />
    <CustomStyles />
    <ApplyColorMode />
    <Metadata {...metadata} />
    <SiteVerification />
    <Analytics />

    <!-- Comment the line below to disable View Transitions -->
    <ClientRouter fallback="swap" />

    <!-- AdSense Script -->
    <script  src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-1193332880003971" crossorigin="anonymous"></script>
  </head>
  
  <body class="antialiased text-default bg-page tracking-tight">
    <slot />

    <BasicScripts />

    <!-- Enhanced AdSense View Transition Handler -->
    <script >
      function initializeAds() {
        if (typeof window === 'undefined' || !window.adsbygoogle) {
          console.log('AdSense not ready, retrying...');
          return setTimeout(initializeAds, 500);
        }

        const ads = Array.from(document.querySelectorAll('.adsbygoogle')).filter(
          ad => ad.offsetParent !== null // visible ads only
        );

        console.log(`Initializing ${ads.length} visible ad(s)...`);
        ads.forEach((ad, index) => {
          if (!ad.hasAttribute('data-adsbygoogle-status') && !ad.hasAttribute('data-ad-status')) {
            try {
              window.adsbygoogle.push({});
              console.log(`✅ Ad ${index + 1} initialized`);
            } catch (e) {
              console.warn(`❌ Failed to initialize ad ${index + 1}`, e);
            }
          }
        });
      }

      function clearAds() {
        const ads = document.querySelectorAll('.adsbygoogle');
        ads.forEach((ad, index) => {
          ad.innerHTML = '';
          ad.removeAttribute('data-adsbygoogle-status');
          ad.removeAttribute('data-ad-status');
          ad.removeAttribute('data-google-query-id');
        });
      }

      // View transition events
      document.addEventListener('astro:before-preparation', clearAds);
      document.addEventListener('astro:after-swap', () => {
        console.log('Reinitializing ads after swap...');
        setTimeout(initializeAds, 300);
      });

      // Initial load
      document.addEventListener('DOMContentLoaded', () => {
        console.log('DOM loaded, initializing ads...');
        setTimeout(initializeAds, 100);
      });

      // Final fallback
      window.addEventListener('load', () => {
        const uninitialized = document.querySelectorAll('.adsbygoogle:not([data-adsbygoogle-status])');
        if (uninitialized.length > 0) {
          console.log(`Retrying ${uninitialized.length} uninitialized ad(s)...`);
          setTimeout(initializeAds, 500);
        }
      });

      // Mutation observer for dynamic ads
      const observer = new MutationObserver((mutations) => {
        let shouldInit = false;
        for (const mutation of mutations) {
          mutation.addedNodes.forEach(node => {
            if (
              node.nodeType === 1 &&
              (node.classList?.contains('adsbygoogle') || node.querySelector?.('.adsbygoogle'))
            ) {
              shouldInit = true;
            }
          });
        }

        if (shouldInit) {
          console.log('Detected new ad(s), initializing...');
          setTimeout(initializeAds, 300);
        }
      });

      document.addEventListener('DOMContentLoaded', () => {
        observer.observe(document.body, { childList: true, subtree: true });
      });
    </script>
  </body>
</html>
