---
export interface Achievement {
  title: string;
  date: string;
  description: string;
  imageUrl?: string;
}

export interface Certification {
  title: string;
  issuer: string;
  date: string;
  imageUrl?: string;
  credentialUrl?: string;
}

export interface Props {
  achievements: Array<Achievement>;
  certifications: Array<Certification>;
  title?: string;
  subtitle?: string;
}

const {
  achievements,
  certifications,
  title = 'Achievements & Certifications',
  subtitle = 'My professional accomplishments and credentials'
} = Astro.props;

let activeTab = 'certifications';
---

<div class="mx-auto max-w-6xl px-4 py-8 sm:px-6 lg:px-8 lg:py-12">
  <div class="mb-8 text-center">
    <h2 class="text-3xl font-bold tracking-tight text-gray-900 dark:text-white sm:text-4xl">{title}</h2>
    <p class="mt-4 text-lg leading-6 text-gray-600 dark:text-gray-400">{subtitle}</p>
  </div>

  <!-- New Centered Tabs -->
  <div class="mb-8 flex justify-center">
    <div class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-800 p-1 shadow-inner">
      <button
      class="tab-btn px-5 py-2 text-sm font-medium rounded-full transition-all duration-300 focus:outline-none"
      data-tab="certifications"
      class:active={activeTab === 'certifications'}
    >
      Certifications
    </button>
      <button
        class="tab-btn px-5 py-2 text-sm font-medium rounded-full transition-all duration-300 focus:outline-none"
        data-tab="achievements"
        class:active={activeTab === 'achievements'}
      >
        Achievements
      </button>

    </div>
  </div>

  <!-- Content -->
  <div class="relative overflow-hidden">


    <!-- Certifications Tab -->
    <div id="certifications-tab" class="tab-content hidden">
      <div class="flex space-x-4 overflow-x-auto pb-4 snap-x">
        {certifications.map((certification) => (
          <div class="flex-none w-80 snap-center bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
            {certification.imageUrl && (
              <img src={certification.imageUrl} alt={certification.title} class="w-full h-48 object-cover" />
            )}
            <div class="p-4">
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{certification.title}</h3>
              <p class="text-sm text-gray-600 dark:text-gray-400">{certification.issuer}</p>
              <time class="text-sm text-gray-500 dark:text-gray-400">{certification.date}</time>
              {certification.credentialUrl && (
                <a
                  href={certification.credentialUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="mt-2 inline-flex items-center text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 dark:hover:text-blue-300"
                >
                  View Credential
                  <svg class="ml-1 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                  </svg>
                </a>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
      <!-- Achievements Tab -->
      <div id="achievements-tab" class="tab-content">
        <div class="flex space-x-4 overflow-x-auto pb-4 snap-x">
          {achievements.map((achievement) => (
            <div class="flex-none w-80 snap-center bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden">
              {achievement.imageUrl && (
                <img src={achievement.imageUrl} alt={achievement.title} class="w-full h-48 object-cover" />
              )}
              <div class="p-4">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">{achievement.title}</h3>
                <time class="text-sm text-gray-500 dark:text-gray-400">{achievement.date}</time>
                <p class="mt-2 text-gray-600 dark:text-gray-300">{achievement.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
</div>

<style>
  .tab-btn.active {
    @apply bg-white dark:bg-gray-900 shadow;
    color: var(--aw-color-accent);
  }

  .tab-btn:not(.active) {
    @apply text-gray-600 dark:text-gray-400 hover:text-[var(--aw-color-accent)];
  }
</style>


<script>
  function setupTabs() {
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');

    function switchTab(tabId) {
      tabButtons.forEach(btn => {
        if (btn.dataset.tab === tabId) {
          btn.classList.add('active');
        } else {
          btn.classList.remove('active');
        }
      });

      tabContents.forEach(content => {
        content.classList.toggle('hidden', content.id !== `${tabId}-tab`);
      });
    }

    tabButtons.forEach(button => {
      button.addEventListener('click', () => {
        const tabId = button.dataset.tab;
        switchTab(tabId);
      });
    });

    document.addEventListener('DOMContentLoaded', () => switchTab('certifications'));

  }

  setupTabs();
</script>
